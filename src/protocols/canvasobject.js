/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.CanvasObject');
goog.provide('proto.CanvasObject.CanvasType');
goog.provide('proto.CanvasObject.Comment');
goog.provide('proto.CanvasObject.Stroke');
goog.provide('proto.CanvasObject.Stroke.Path');
goog.provide('proto.CanvasObject.Stroke.Pen');
goog.provide('proto.CanvasObject.Stroke.Pen.Mask');
goog.provide('proto.CanvasObject.Text');
goog.provide('proto.CanvasObject.Text.TextAlignment');
goog.provide('proto.CanvasObject.VoiceNote');

goog.require('jspb.Message');
goog.require('proto.Dimensions');
goog.require('proto.Point');
goog.require('proto.RGBColor');
goog.require('proto.google.protobuf.Timestamp');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CanvasObject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.CanvasObject.oneofGroups_);
};
goog.inherits(proto.CanvasObject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CanvasObject.displayName = 'proto.CanvasObject';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.CanvasObject.oneofGroups_ = [[11,12,13,14]];

/**
 * @enum {number}
 */
proto.CanvasObject.DataCase = {
  DATA_NOT_SET: 0,
  STROKE: 11,
  COMMENT: 12,
  TEXTONPAGE: 13,
  VOICENOTE: 14
};

/**
 * @return {proto.CanvasObject.DataCase}
 */
proto.CanvasObject.prototype.getDataCase = function() {
  return /** @type {proto.CanvasObject.DataCase} */(jspb.Message.computeOneofCase(this, proto.CanvasObject.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CanvasObject.prototype.toObject = function(opt_includeInstance) {
  return proto.CanvasObject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CanvasObject} msg The msg instance to transform.
 * @return {!Object}
 */
proto.CanvasObject.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: msg.getType(),
    id: msg.getId(),
    active: msg.getActive(),
    shared: msg.getShared(),
    page: msg.getPage(),
    position: (f = msg.getPosition()) && proto.Point.toObject(includeInstance, f),
    layer: msg.getLayer(),
    createdtimestamp: (f = msg.getCreatedtimestamp()) && proto.google.protobuf.Timestamp.toObject(includeInstance, f),
    updatedtimestamp: (f = msg.getUpdatedtimestamp()) && proto.google.protobuf.Timestamp.toObject(includeInstance, f),
    publishedtimestamp: (f = msg.getPublishedtimestamp()) && proto.google.protobuf.Timestamp.toObject(includeInstance, f),
    stroke: (f = msg.getStroke()) && proto.CanvasObject.Stroke.toObject(includeInstance, f),
    comment: (f = msg.getComment()) && proto.CanvasObject.Comment.toObject(includeInstance, f),
    textonpage: (f = msg.getTextonpage()) && proto.CanvasObject.Text.toObject(includeInstance, f),
    voicenote: (f = msg.getVoicenote()) && proto.CanvasObject.VoiceNote.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.CanvasObject} The clone.
 */
proto.CanvasObject.prototype.cloneMessage = function() {
  return /** @type {!proto.CanvasObject} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional CanvasType type = 1;
 * @return {!proto.CanvasObject.CanvasType}
 */
proto.CanvasObject.prototype.getType = function() {
  return /** @type {!proto.CanvasObject.CanvasType} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {!proto.CanvasObject.CanvasType} value  */
proto.CanvasObject.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 id = 2;
 * @return {number}
 */
proto.CanvasObject.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.CanvasObject.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool active = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.CanvasObject.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 3, false));
};


/** @param {boolean} value  */
proto.CanvasObject.prototype.setActive = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bool shared = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.CanvasObject.prototype.getShared = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 4, false));
};


/** @param {boolean} value  */
proto.CanvasObject.prototype.setShared = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 page = 5;
 * @return {number}
 */
proto.CanvasObject.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.CanvasObject.prototype.setPage = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional Point position = 6;
 * @return {proto.Point}
 */
proto.CanvasObject.prototype.getPosition = function() {
  return /** @type{proto.Point} */ (
    jspb.Message.getWrapperField(this, proto.Point, 6));
};


/** @param {proto.Point|undefined} value  */
proto.CanvasObject.prototype.setPosition = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.CanvasObject.prototype.clearPosition = function() {
  this.setPosition(undefined);
};


/**
 * optional int32 layer = 7;
 * @return {number}
 */
proto.CanvasObject.prototype.getLayer = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 7, 0));
};


/** @param {number} value  */
proto.CanvasObject.prototype.setLayer = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional google.protobuf.Timestamp createdTimeStamp = 8;
 * @return {proto.google.protobuf.Timestamp}
 */
proto.CanvasObject.prototype.getCreatedtimestamp = function() {
  return /** @type{proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Timestamp, 8));
};


/** @param {proto.google.protobuf.Timestamp|undefined} value  */
proto.CanvasObject.prototype.setCreatedtimestamp = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.CanvasObject.prototype.clearCreatedtimestamp = function() {
  this.setCreatedtimestamp(undefined);
};


/**
 * optional google.protobuf.Timestamp updatedTimeStamp = 9;
 * @return {proto.google.protobuf.Timestamp}
 */
proto.CanvasObject.prototype.getUpdatedtimestamp = function() {
  return /** @type{proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Timestamp, 9));
};


/** @param {proto.google.protobuf.Timestamp|undefined} value  */
proto.CanvasObject.prototype.setUpdatedtimestamp = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.CanvasObject.prototype.clearUpdatedtimestamp = function() {
  this.setUpdatedtimestamp(undefined);
};


/**
 * optional google.protobuf.Timestamp publishedTimeStamp = 10;
 * @return {proto.google.protobuf.Timestamp}
 */
proto.CanvasObject.prototype.getPublishedtimestamp = function() {
  return /** @type{proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Timestamp, 10));
};


/** @param {proto.google.protobuf.Timestamp|undefined} value  */
proto.CanvasObject.prototype.setPublishedtimestamp = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.CanvasObject.prototype.clearPublishedtimestamp = function() {
  this.setPublishedtimestamp(undefined);
};


/**
 * optional Stroke stroke = 11;
 * @return {proto.CanvasObject.Stroke}
 */
proto.CanvasObject.prototype.getStroke = function() {
  return /** @type{proto.CanvasObject.Stroke} */ (
    jspb.Message.getWrapperField(this, proto.CanvasObject.Stroke, 11));
};


/** @param {proto.CanvasObject.Stroke|undefined} value  */
proto.CanvasObject.prototype.setStroke = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.CanvasObject.oneofGroups_[0], value);
};


proto.CanvasObject.prototype.clearStroke = function() {
  this.setStroke(undefined);
};


/**
 * optional Comment comment = 12;
 * @return {proto.CanvasObject.Comment}
 */
proto.CanvasObject.prototype.getComment = function() {
  return /** @type{proto.CanvasObject.Comment} */ (
    jspb.Message.getWrapperField(this, proto.CanvasObject.Comment, 12));
};


/** @param {proto.CanvasObject.Comment|undefined} value  */
proto.CanvasObject.prototype.setComment = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.CanvasObject.oneofGroups_[0], value);
};


proto.CanvasObject.prototype.clearComment = function() {
  this.setComment(undefined);
};


/**
 * optional Text textOnPage = 13;
 * @return {proto.CanvasObject.Text}
 */
proto.CanvasObject.prototype.getTextonpage = function() {
  return /** @type{proto.CanvasObject.Text} */ (
    jspb.Message.getWrapperField(this, proto.CanvasObject.Text, 13));
};


/** @param {proto.CanvasObject.Text|undefined} value  */
proto.CanvasObject.prototype.setTextonpage = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.CanvasObject.oneofGroups_[0], value);
};


proto.CanvasObject.prototype.clearTextonpage = function() {
  this.setTextonpage(undefined);
};


/**
 * optional VoiceNote voiceNote = 14;
 * @return {proto.CanvasObject.VoiceNote}
 */
proto.CanvasObject.prototype.getVoicenote = function() {
  return /** @type{proto.CanvasObject.VoiceNote} */ (
    jspb.Message.getWrapperField(this, proto.CanvasObject.VoiceNote, 14));
};


/** @param {proto.CanvasObject.VoiceNote|undefined} value  */
proto.CanvasObject.prototype.setVoicenote = function(value) {
  jspb.Message.setOneofWrapperField(this, 14, proto.CanvasObject.oneofGroups_[0], value);
};


proto.CanvasObject.prototype.clearVoicenote = function() {
  this.setVoicenote(undefined);
};


/**
 * @enum {number}
 */
proto.CanvasObject.CanvasType = {
  NONE: 0,
  INK: 1,
  COMMENT: 2,
  TEXT_ON_PAGE: 3,
  VOICE_NOTE: 4
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CanvasObject.Stroke = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.CanvasObject.Stroke.repeatedFields_, null);
};
goog.inherits(proto.CanvasObject.Stroke, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CanvasObject.Stroke.displayName = 'proto.CanvasObject.Stroke';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CanvasObject.Stroke.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CanvasObject.Stroke.prototype.toObject = function(opt_includeInstance) {
  return proto.CanvasObject.Stroke.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CanvasObject.Stroke} msg The msg instance to transform.
 * @return {!Object}
 */
proto.CanvasObject.Stroke.toObject = function(includeInstance, msg) {
  var f, obj = {
    pen: (f = msg.getPen()) && proto.CanvasObject.Stroke.Pen.toObject(includeInstance, f),
    pathList: jspb.Message.toObjectList(msg.getPathList(),
    proto.CanvasObject.Stroke.Path.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.CanvasObject.Stroke} The clone.
 */
proto.CanvasObject.Stroke.prototype.cloneMessage = function() {
  return /** @type {!proto.CanvasObject.Stroke} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Pen pen = 1;
 * @return {proto.CanvasObject.Stroke.Pen}
 */
proto.CanvasObject.Stroke.prototype.getPen = function() {
  return /** @type{proto.CanvasObject.Stroke.Pen} */ (
    jspb.Message.getWrapperField(this, proto.CanvasObject.Stroke.Pen, 1));
};


/** @param {proto.CanvasObject.Stroke.Pen|undefined} value  */
proto.CanvasObject.Stroke.prototype.setPen = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.CanvasObject.Stroke.prototype.clearPen = function() {
  this.setPen(undefined);
};


/**
 * repeated Path path = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.CanvasObject.Stroke.Path>}
 */
proto.CanvasObject.Stroke.prototype.getPathList = function() {
  return /** @type{!Array.<!proto.CanvasObject.Stroke.Path>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CanvasObject.Stroke.Path, 2));
};


/** @param {Array.<!proto.CanvasObject.Stroke.Path>|undefined} value  */
proto.CanvasObject.Stroke.prototype.setPathList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.CanvasObject.Stroke.prototype.clearPathList = function() {
  this.setPathList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CanvasObject.Stroke.Pen = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CanvasObject.Stroke.Pen, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CanvasObject.Stroke.Pen.displayName = 'proto.CanvasObject.Stroke.Pen';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CanvasObject.Stroke.Pen.prototype.toObject = function(opt_includeInstance) {
  return proto.CanvasObject.Stroke.Pen.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CanvasObject.Stroke.Pen} msg The msg instance to transform.
 * @return {!Object}
 */
proto.CanvasObject.Stroke.Pen.toObject = function(includeInstance, msg) {
  var f, obj = {
    mask: msg.getMask(),
    rgbcolor: (f = msg.getRgbcolor()) && proto.RGBColor.toObject(includeInstance, f),
    thickness: msg.getThickness()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.CanvasObject.Stroke.Pen} The clone.
 */
proto.CanvasObject.Stroke.Pen.prototype.cloneMessage = function() {
  return /** @type {!proto.CanvasObject.Stroke.Pen} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Mask mask = 1;
 * @return {!proto.CanvasObject.Stroke.Pen.Mask}
 */
proto.CanvasObject.Stroke.Pen.prototype.getMask = function() {
  return /** @type {!proto.CanvasObject.Stroke.Pen.Mask} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {!proto.CanvasObject.Stroke.Pen.Mask} value  */
proto.CanvasObject.Stroke.Pen.prototype.setMask = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional RGBColor rgbColor = 2;
 * @return {proto.RGBColor}
 */
proto.CanvasObject.Stroke.Pen.prototype.getRgbcolor = function() {
  return /** @type{proto.RGBColor} */ (
    jspb.Message.getWrapperField(this, proto.RGBColor, 2));
};


/** @param {proto.RGBColor|undefined} value  */
proto.CanvasObject.Stroke.Pen.prototype.setRgbcolor = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.CanvasObject.Stroke.Pen.prototype.clearRgbcolor = function() {
  this.setRgbcolor(undefined);
};


/**
 * optional float thickness = 3;
 * @return {number}
 */
proto.CanvasObject.Stroke.Pen.prototype.getThickness = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.CanvasObject.Stroke.Pen.prototype.setThickness = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.CanvasObject.Stroke.Pen.Mask = {
  NONE: 0,
  ERASER: 1
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CanvasObject.Stroke.Path = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CanvasObject.Stroke.Path, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CanvasObject.Stroke.Path.displayName = 'proto.CanvasObject.Stroke.Path';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CanvasObject.Stroke.Path.prototype.toObject = function(opt_includeInstance) {
  return proto.CanvasObject.Stroke.Path.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CanvasObject.Stroke.Path} msg The msg instance to transform.
 * @return {!Object}
 */
proto.CanvasObject.Stroke.Path.toObject = function(includeInstance, msg) {
  var f, obj = {
    curvetype: msg.getCurvetype(),
    point1: (f = msg.getPoint1()) && proto.Point.toObject(includeInstance, f),
    point2: (f = msg.getPoint2()) && proto.Point.toObject(includeInstance, f),
    point3: (f = msg.getPoint3()) && proto.Point.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.CanvasObject.Stroke.Path} The clone.
 */
proto.CanvasObject.Stroke.Path.prototype.cloneMessage = function() {
  return /** @type {!proto.CanvasObject.Stroke.Path} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 curveType = 1;
 * @return {number}
 */
proto.CanvasObject.Stroke.Path.prototype.getCurvetype = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.CanvasObject.Stroke.Path.prototype.setCurvetype = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Point point1 = 2;
 * @return {proto.Point}
 */
proto.CanvasObject.Stroke.Path.prototype.getPoint1 = function() {
  return /** @type{proto.Point} */ (
    jspb.Message.getWrapperField(this, proto.Point, 2));
};


/** @param {proto.Point|undefined} value  */
proto.CanvasObject.Stroke.Path.prototype.setPoint1 = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.CanvasObject.Stroke.Path.prototype.clearPoint1 = function() {
  this.setPoint1(undefined);
};


/**
 * optional Point point2 = 3;
 * @return {proto.Point}
 */
proto.CanvasObject.Stroke.Path.prototype.getPoint2 = function() {
  return /** @type{proto.Point} */ (
    jspb.Message.getWrapperField(this, proto.Point, 3));
};


/** @param {proto.Point|undefined} value  */
proto.CanvasObject.Stroke.Path.prototype.setPoint2 = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.CanvasObject.Stroke.Path.prototype.clearPoint2 = function() {
  this.setPoint2(undefined);
};


/**
 * optional Point point3 = 4;
 * @return {proto.Point}
 */
proto.CanvasObject.Stroke.Path.prototype.getPoint3 = function() {
  return /** @type{proto.Point} */ (
    jspb.Message.getWrapperField(this, proto.Point, 4));
};


/** @param {proto.Point|undefined} value  */
proto.CanvasObject.Stroke.Path.prototype.setPoint3 = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.CanvasObject.Stroke.Path.prototype.clearPoint3 = function() {
  this.setPoint3(undefined);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CanvasObject.Comment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CanvasObject.Comment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CanvasObject.Comment.displayName = 'proto.CanvasObject.Comment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CanvasObject.Comment.prototype.toObject = function(opt_includeInstance) {
  return proto.CanvasObject.Comment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CanvasObject.Comment} msg The msg instance to transform.
 * @return {!Object}
 */
proto.CanvasObject.Comment.toObject = function(includeInstance, msg) {
  var f, obj = {
    comment: msg.getComment()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.CanvasObject.Comment} The clone.
 */
proto.CanvasObject.Comment.prototype.cloneMessage = function() {
  return /** @type {!proto.CanvasObject.Comment} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string comment = 1;
 * @return {string}
 */
proto.CanvasObject.Comment.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.CanvasObject.Comment.prototype.setComment = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CanvasObject.Text = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CanvasObject.Text, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CanvasObject.Text.displayName = 'proto.CanvasObject.Text';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CanvasObject.Text.prototype.toObject = function(opt_includeInstance) {
  return proto.CanvasObject.Text.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CanvasObject.Text} msg The msg instance to transform.
 * @return {!Object}
 */
proto.CanvasObject.Text.toObject = function(includeInstance, msg) {
  var f, obj = {
    dimensions: (f = msg.getDimensions()) && proto.Dimensions.toObject(includeInstance, f),
    fontsize: msg.getFontsize(),
    textalignment: msg.getTextalignment(),
    textcolor: (f = msg.getTextcolor()) && proto.RGBColor.toObject(includeInstance, f),
    text: msg.getText()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.CanvasObject.Text} The clone.
 */
proto.CanvasObject.Text.prototype.cloneMessage = function() {
  return /** @type {!proto.CanvasObject.Text} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Dimensions dimensions = 1;
 * @return {proto.Dimensions}
 */
proto.CanvasObject.Text.prototype.getDimensions = function() {
  return /** @type{proto.Dimensions} */ (
    jspb.Message.getWrapperField(this, proto.Dimensions, 1));
};


/** @param {proto.Dimensions|undefined} value  */
proto.CanvasObject.Text.prototype.setDimensions = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.CanvasObject.Text.prototype.clearDimensions = function() {
  this.setDimensions(undefined);
};


/**
 * optional float fontSize = 2;
 * @return {number}
 */
proto.CanvasObject.Text.prototype.getFontsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.CanvasObject.Text.prototype.setFontsize = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional TextAlignment textAlignment = 3;
 * @return {!proto.CanvasObject.Text.TextAlignment}
 */
proto.CanvasObject.Text.prototype.getTextalignment = function() {
  return /** @type {!proto.CanvasObject.Text.TextAlignment} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {!proto.CanvasObject.Text.TextAlignment} value  */
proto.CanvasObject.Text.prototype.setTextalignment = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional RGBColor textColor = 4;
 * @return {proto.RGBColor}
 */
proto.CanvasObject.Text.prototype.getTextcolor = function() {
  return /** @type{proto.RGBColor} */ (
    jspb.Message.getWrapperField(this, proto.RGBColor, 4));
};


/** @param {proto.RGBColor|undefined} value  */
proto.CanvasObject.Text.prototype.setTextcolor = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.CanvasObject.Text.prototype.clearTextcolor = function() {
  this.setTextcolor(undefined);
};


/**
 * optional string text = 5;
 * @return {string}
 */
proto.CanvasObject.Text.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.CanvasObject.Text.prototype.setText = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * @enum {number}
 */
proto.CanvasObject.Text.TextAlignment = {
  LEFT: 0,
  CENTER: 1,
  RIGHT: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CanvasObject.VoiceNote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CanvasObject.VoiceNote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CanvasObject.VoiceNote.displayName = 'proto.CanvasObject.VoiceNote';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CanvasObject.VoiceNote.prototype.toObject = function(opt_includeInstance) {
  return proto.CanvasObject.VoiceNote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CanvasObject.VoiceNote} msg The msg instance to transform.
 * @return {!Object}
 */
proto.CanvasObject.VoiceNote.toObject = function(includeInstance, msg) {
  var f, obj = {
    audioattachmentid: msg.getAudioattachmentid()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.CanvasObject.VoiceNote} The clone.
 */
proto.CanvasObject.VoiceNote.prototype.cloneMessage = function() {
  return /** @type {!proto.CanvasObject.VoiceNote} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string audioAttachmentId = 1;
 * @return {string}
 */
proto.CanvasObject.VoiceNote.prototype.getAudioattachmentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.CanvasObject.VoiceNote.prototype.setAudioattachmentid = function(value) {
  jspb.Message.setField(this, 1, value);
};


